def format_message(msg, format_type='full', idx=None, total=None):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        msg_content = msg.get('body_html', '') or msg.get('body', '')
        if not msg_content:
            msg_content = "–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
        # –û—á–∏—â–∞–µ–º HTML
        msg_content = re.sub(r'<style.*?</style>', '', msg_content, flags=re.DOTALL)
        msg_content = re.sub(r'<script.*?</script>', '', msg_content, flags=re.DOTALL)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è HTML, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        links = []
        for match in re.finditer(r'href=[\'"]([^\'"]+)[\'"]', msg_content):
            link = match.group(1).strip()
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Å—Å—ã–ª–∫–∏
            link = ''.join(link.split())
            if link:
                links.append(link)
        
        print(f"DEBUG - Found raw links: {links}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
        valid_links = []
        for link in links:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É URL
            if not re.match(r'^https?://', link):
                if not link.startswith(('javascript:', 'data:', 'file:', 'ftp:', 'mailto:')):
                    link = 'https://' + link
                else:
                    print(f"DEBUG - Skipping invalid protocol link: {link}")
                    continue
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–æ–º–µ–Ω
            if not re.match(r'^https?://[a-zA-Z0-9-_.]+\.[a-zA-Z]{2,}', link):
                print(f"DEBUG - Invalid domain in link: {link}")
                continue
                
            try:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã URL
                from urllib.parse import urlparse, urljoin
                parsed = urlparse(link)
                if all([parsed.scheme, parsed.netloc]):
                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –æ–±—Ä–∞—Ç–Ω–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
                    clean_link = urljoin(parsed.scheme + '://' + parsed.netloc, parsed.path)
                    if parsed.query:
                        clean_link += '?' + parsed.query
                    if parsed.fragment:
                        clean_link += '#' + parsed.fragment
                    valid_links.append(clean_link)
                    print(f"DEBUG - Valid link added: {clean_link}")
                else:
                    print(f"DEBUG - Invalid URL structure: {link}")
            except Exception as e:
                print(f"DEBUG - URL parsing error: {str(e)} for link: {link}")
                continue
        
        print(f"DEBUG - Valid links after filtering: {valid_links}")
        
        # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è HTML —Ç–µ–≥–∏
        msg_content = re.sub(r'<[^>]+>', ' ', msg_content)
        msg_content = re.sub(r'\s+', ' ', msg_content)
        msg_content = msg_content.strip()
    
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        from_field = msg.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        subject = msg.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
        date = msg.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        msg_content = msg_content.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
        from_field = from_field.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
        subject = subject.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"""üì® {idx}/{total if total else '?'}
–û—Ç: {from_field}
–¢–µ–º–∞: {subject}
–î–∞—Ç–∞: {date}

üìù –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:
{msg_content}"""

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_keyboard = InlineKeyboardMarkup()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ HTML, –µ—Å–ª–∏ –µ—Å—Ç—å
        if valid_links:
            message_text += "\n\nüîó –°—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞:"
            for i, link in enumerate(valid_links):
                try:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                    button_text = f"üîó –°—Å—ã–ª–∫–∞ {i+1}"
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
                    msg_keyboard.row(InlineKeyboardButton(text=button_text, url=link))
                    print(f"DEBUG - Added button with URL: {link}")
                except Exception as e:
                    print(f"DEBUG - Error adding URL button: {str(e)}, URL: {link}")
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏
                    message_text += f"\n{button_text}: {link}"
                    continue

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_codes = []
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–¥—ã –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç–µ–∫—Å—Ç–µ
        numeric_codes = re.findall(r'(?<!\d)(\d{6})(?!\d)', msg_content)
        verification_codes.extend(numeric_codes)
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º –∫–æ–¥—ã –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        code_patterns = [
            r'(?:code|–∫–æ–¥|verify|token|auth|pin)[:\s]+(\d{6})',
            r'(?:enter|–≤–≤–µ–¥–∏—Ç–µ)[:\s]+(?:the\s+)?(?:code|pin|–∫–æ–¥)?[:\s]*(\d{6})',
            r'(?:verification|confirmation)[:\s]+(?:code|pin|–∫–æ–¥)?[:\s]*(\d{6})',
            r'(?:your|–≤–∞—à)[:\s]+(?:code|pin|–∫–æ–¥)[:\s]+(?:is|:)[:\s]*(\d{6})',
            r'(?<!\d)(\d{6})(?!\d)',  # –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        ]
        
        for pattern in code_patterns:
            matches = re.finditer(pattern, msg_content, re.MULTILINE | re.IGNORECASE)
            for match in matches:
                code = match.group(1) if len(match.groups()) > 0 else match.group(0)
                code = code.strip()
                if code and code.isdigit() and len(code) == 6:
                    verification_codes.append(code)
                    print(f"DEBUG - Found numeric code: {code}")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        verification_codes = sorted(set(verification_codes))
        print(f"DEBUG - Final codes: {verification_codes}")
        
        if verification_codes:
            message_text += "\n\nüîë –ö–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"
            for code in verification_codes:
                message_text += f"\n`{code}`"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        msg_keyboard.row(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"del_{idx}"))
            
        return message_text, msg_keyboard
        
    except Exception as e:
        print(f"DEBUG - Error in format_message: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        error_text = f"""üì® {idx}/{total if total else '?'}
–û—Ç: {msg.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–¢–µ–º–∞: {msg.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')}
–î–∞—Ç–∞: {msg.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return error_text, InlineKeyboardMarkup() 