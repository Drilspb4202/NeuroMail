import telebot
import requests
import json
import os
from dotenv import load_dotenv
import time
import re
import random
import string
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, Message

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
print(f"Debug - Loading bot token: {BOT_TOKEN}")

if not BOT_TOKEN:
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ .env —Ñ–∞–π–ª–∞")

bot = telebot.TeleBot(BOT_TOKEN)

# API URLs
BASE_URL = "https://tempmail.glitchy.workers.dev"
GET_MAIL_URL = f"{BASE_URL}/get"
GET_MESSAGES_URL = f"{BASE_URL}/see"
GET_MESSAGE_CONTENT_URL = f"{BASE_URL}/message"
CUSTOM_MAIL_URL = f"{BASE_URL}/custom"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è email –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_emails = {}

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
check_timers = {}

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
check_intervals = {}

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
user_read_messages = {}

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
user_message_format = {}

# –§–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_FORMATS = {
    'full': 'üìã –ü–æ–ª–Ω—ã–π',
    'brief': 'üìù –ö—Ä–∞—Ç–∫–∏–π',
    'compact': 'üì± –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π'
}

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
AVAILABLE_DOMAINS = [
    'guerrillamail.com',
    'guerrillamail.net',
    'guerrillamail.org',
    'sharklasers.com',
    'grr.la',
    'pokemail.net',
    'spam4.me'
]

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram)
ADMIN_IDS = [int(os.getenv('ADMIN_ID', '0'))]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
bot_stats = {
    'start_time': time.time(),
    'total_users': set(),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    'total_emails_created': 0,
    'total_messages_received': 0,
    'total_checks': 0,
    'active_emails': 0,  # –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏
}

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_stats = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –ø–æ—á—Ç—ã
EMAIL_LIFETIME = 3600  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
EMAIL_CHECK_INTERVAL = 15  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥

# –°–ø–∏—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω
FIRST_NAMES = [
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞
    "Alex", "Michael", "David", "John", "James", "Robert", "William", "Thomas",
    "Daniel", "Richard", "Joseph", "Charles", "Christopher", "Paul", "Mark",
    "Donald", "George", "Kenneth", "Steven", "Edward", "Brian", "Ronald",
    "Anthony", "Kevin", "Jason", "Matthew", "Gary", "Timothy", "Jose", "Larry",
    # –†—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ (—Ç—Ä–∞–Ω—Å–ª–∏—Ç)
    "Ivan", "Dmitry", "Sergey", "Andrey", "Pavel", "Mikhail", "Nikolay", "Vladimir",
    "Alexander", "Maxim", "Anton", "Roman", "Artem", "Denis", "Evgeny", "Igor",
    "Oleg", "Victor", "Yury", "Boris", "Konstantin", "Leo", "Peter", "Vadim"
]

LAST_NAMES = [
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ–∞–º–∏–ª–∏–∏
    "Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller", "Davis",
    "Rodriguez", "Martinez", "Hernandez", "Lopez", "Gonzalez", "Wilson", "Anderson",
    "Thomas", "Taylor", "Moore", "Jackson", "Martin", "Lee", "Thompson", "White",
    "Harris", "Clark", "Lewis", "Robinson", "Walker", "Hall", "Young",
    # –†—É—Å—Å–∫–∏–µ —Ñ–∞–º–∏–ª–∏–∏ (—Ç—Ä–∞–Ω—Å–ª–∏—Ç)
    "Ivanov", "Petrov", "Sidorov", "Smirnov", "Kuznetsov", "Popov", "Sokolov",
    "Lebedev", "Kozlov", "Novikov", "Morozov", "Volkov", "Solovyov", "Vasiliev",
    "Zaytsev", "Pavlov", "Semyonov", "Golubev", "Vinogradov", "Bogdanov"
]

def generate_random_name():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –ª–æ–≥–∏–Ω"""
    first_name = random.choice(FIRST_NAMES)
    last_name = random.choice(LAST_NAMES)
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    random_number = random.randint(1, 999)
    login = f"{first_name.lower()}.{last_name.lower()}{random_number}"
    return {
        'first_name': first_name,
        'last_name': last_name,
        'login': login
    }

def get_messages(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        if user_id not in user_emails:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìß –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç—É")
            return

        update_stats(user_id, 'messages_checked')
        
        checking_msg = bot.reply_to(message, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        email_data = user_emails[user_id]
        email = email_data['email']
        url = f"{GET_MESSAGES_URL}?mail={email}"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            
            if not response.text.strip():
                bot.reply_to(message, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
                bot.delete_message(message.chat.id, checking_msg.message_id)
                return

            try:
                data = json.loads(response.text)
                if not isinstance(data, dict):
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    
                messages = data.get('messages', [])
                if not messages:
                    bot.reply_to(message, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
                    bot.delete_message(message.chat.id, checking_msg.message_id)
                    return
                    
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if user_id not in user_read_messages:
                    user_read_messages[user_id] = set()

                # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                for msg in messages:
                    msg_id = msg.get('id', '')
                    if msg_id:
                        user_read_messages[user_id].add(msg_id)
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        update_stats(user_id, 'message_received')

                format_type = user_message_format.get(user_id, 'full')

                for idx, msg in enumerate(messages, 1):
                    message_text = format_message(msg, format_type, idx, len(messages))

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    msg_keyboard = InlineKeyboardMarkup()
                    msg_keyboard.row(
                        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"del_{idx}")
                    )
                    
                    if format_type != 'full':
                        msg_keyboard.row(
                            InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"show_full_{idx}")
                        )

                    try:
                        bot.send_message(message.chat.id, message_text, parse_mode='Markdown', reply_markup=msg_keyboard)
                    except Exception as e:
                        print(f"DEBUG - Error sending message {idx}: {str(e)}")
                        try:
                            short_message = format_message(msg, 'compact', idx, len(messages))
                            bot.send_message(message.chat.id, short_message, reply_markup=msg_keyboard)
                        except Exception as e2:
                            print(f"DEBUG - Error sending short message {idx}: {str(e2)}")

                try:
                    bot.delete_message(message.chat.id, checking_msg.message_id)
                except:
                    pass
                    
            except json.JSONDecodeError as e:
                print(f"DEBUG - JSON Parse Error: {str(e)}, Response: {response.text}")
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                bot.delete_message(message.chat.id, checking_msg.message_id)
                
        except requests.exceptions.RequestException as e:
            print(f"DEBUG - Request Error: {str(e)}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            bot.delete_message(message.chat.id, checking_msg.message_id)
            
    except Exception as e:
        print(f"DEBUG - Unexpected Error: {str(e)}")
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        try:
            bot.delete_message(message.chat.id, checking_msg.message_id)
        except:
            pass

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üîç *–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é NeuroMail Bot*

üìß *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç—É - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
‚Ä¢ –£–¥–∞–ª–∏—Ç—å –ø–æ—á—Ç—É - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞
‚Ä¢ –ü–æ–º–æ—â—å - –≤—ã–∑–æ–≤ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏

‚öôÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö
‚Ä¢ –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ –≤ –ø–∏—Å—å–º–∞—Ö
‚Ä¢ –¢—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –í—ã–±–æ—Ä –ø–æ—á—Ç–æ–≤–æ–≥–æ –¥–æ–º–µ–Ω–∞

üì® *–†–∞–±–æ—Ç–∞ —Å –ø–∏—Å—å–º–∞–º–∏:*
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–∏—Å–µ–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTML-–ø–∏—Å–µ–º
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞

üîê *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∂–∏–≤—É—Ç 1 —á–∞—Å
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ

üì± *–§–æ—Ä–º–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:*
‚Ä¢ –ü–æ–ª–Ω—ã–π - –º–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ö—Ä–∞—Ç–∫–∏–π - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
‚Ä¢ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ–µ

‚ö°Ô∏è *–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:*
‚Ä¢ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
‚Ä¢ –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–±–æ—è—Ö
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã

üéØ *–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:*
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ä–∞–∑—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ—á—Ç—É –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –£–¥–∞–ª—è–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–¥—Ä–µ—Å–∞

üìä *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:*
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —è—â–∏–∫–æ–≤
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    bot.reply_to(message, help_text, parse_mode='Markdown')

def update_stats(user_id, action):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if user_id not in user_stats:
        user_stats[user_id] = {
            'emails_created': 0,
            'messages_checked': 0,
            'messages_received': 0,
            'last_active': None
        }
    
    stats = user_stats[user_id]
    stats['last_active'] = time.strftime('%Y-%m-%d %H:%M:%S')
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    bot_stats['total_users'].add(user_id)
    
    if action == 'email_created':
        stats['emails_created'] += 1
        bot_stats['total_emails_created'] += 1
        bot_stats['active_emails'] = len(user_emails)
    elif action == 'messages_checked':
        stats['messages_checked'] += 1
        bot_stats['total_checks'] += 1
    elif action == 'message_received':
        stats['messages_received'] += 1
        bot_stats['total_messages_received'] += 1

@bot.message_handler(commands=['stats'])
def show_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
    current_time = time.time()
    active_users = sum(1 for stats in user_stats.values() 
                      if stats['last_active'] and 
                      time.mktime(time.strptime(stats['last_active'], '%Y-%m-%d %H:%M:%S')) > current_time - 86400)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    uptime = time.time() - bot_stats['start_time']
    days = int(uptime // 86400)
    hours = int((uptime % 86400) // 3600)
    minutes = int((uptime % 3600) // 60)

    stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ NeuroMailBot*

‚è± *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {days}–¥ {hours}—á {minutes}–º

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(bot_stats['total_users'])}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_users}

üìß *–ü–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏:*
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –≤—Å–µ–≥–æ: {bot_stats['total_emails_created']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {bot_stats['active_emails']}

üì® *–°–æ–æ–±—â–µ–Ω–∏—è:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {bot_stats['total_messages_received']}
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ—á—Ç—ã: {bot_stats['total_checks']}

üîù *–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —è—â–∏–∫–æ–≤
    top_users = sorted(user_stats.items(), 
                      key=lambda x: x[1]['emails_created'], 
                      reverse=True)[:5]
    
    for i, (user_id, stats) in enumerate(top_users, 1):
        stats_text += f"{i}. ID: {user_id} - {stats['emails_created']} —è—â–∏–∫–æ–≤\n"

    bot.reply_to(message, stats_text, parse_mode='Markdown')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email –∞–¥—Ä–µ—Å–∞
def format_email(email):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç email –∞–¥—Ä–µ—Å –¥–ª—è URL"""
    # –†–∞–∑–¥–µ–ª—è–µ–º email –Ω–∞ —á–∞—Å—Ç–∏
    username, domain = email.split('@')
    return f"{username}"

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton("üìß –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç—É"))
    keyboard.row(KeyboardButton("üì¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º"))
    keyboard.row(KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—á—Ç—É"), KeyboardButton("üë§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏"))
    return keyboard

def generate_password(length=12):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase
    digits = string.digits
    symbols = "!@#$%^&*()_+-=[]{}|"
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞—Ä–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    password = [
        random.choice(lowercase),
        random.choice(uppercase),
        random.choice(digits),
        random.choice(symbols)
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    for _ in range(length - 4):
        password.append(random.choice(lowercase + uppercase + digits + symbols))
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    random.shuffle(password)
    return ''.join(password)

def create_email_keyboard(email, password):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è email –∏ –ø–∞—Ä–æ–ª—è"""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    return None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ NeuroMailBot - –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ email –∞–¥—Ä–µ—Å–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ —Å–∞–π—Ç–∞—Ö, –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö –∫–æ–¥–æ–≤ –∏ –∑–∞—â–∏—Ç—ã –≤–∞—à–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—á—Ç—ã –æ—Ç —Å–ø–∞–º–∞.

üìß –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—á—Ç—ã –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º
‚Ä¢ –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Å–µ–º

üì® –†–∞–±–æ—Ç–∞ —Å –ø–∏—Å—å–º–∞–º–∏:
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
‚Ä¢ –í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å–µ–º
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö

üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:
üìß –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç—É - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
üì¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
üìã –°–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º - –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—á—Ç—É - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞

–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìß –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email –∞–¥—Ä–µ—Å–∞.
"""
    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown', reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üìß –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç—É")
def create_new_mail(message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email –∞–¥—Ä–µ—Å–∞"""
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
        user_id = message.from_user.id
        if user_id in user_emails and user_id in check_timers:
            stop_checking(message)
        if user_id in user_emails:
            del user_emails[user_id]

        print(f"DEBUG - Trying to create new email...")
        print(f"DEBUG - API URL: {GET_MAIL_URL}")

        response = requests.get(GET_MAIL_URL)
        print(f"DEBUG - Response Status: {response.status_code}")
        print(f"DEBUG - Response Headers: {response.headers}")
        print(f"DEBUG - Response Text: {response.text}")
        
        try:
            data = json.loads(response.text)
            print(f"DEBUG - Parsed JSON: {data}")
            
            if data.get('status') == 'ok' and data.get('mail'):
                email = data['mail']
                expired_at = data.get('expired_at', time.time() + EMAIL_LIFETIME)
                password = generate_password()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º email, –ø–∞—Ä–æ–ª—å –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
                user_emails[message.from_user.id] = {
                    'email': email,
                    'password': password,
                    'expired_at': expired_at
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                update_stats(message.from_user.id, 'email_created')
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É
                start_checking(message)
                
                response_text = f"""
üìß –í–∞—à –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π email –∞–¥—Ä–µ—Å:
`{email}`

üîê –ü–∞—Ä–æ–ª—å:
`{password}`

‚úÖ –ü–æ—á—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –ø–∏—Å–µ–º
‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {time.strftime('%H:%M:%S %d.%m.%Y', time.localtime(expired_at))}"""
                bot.reply_to(message, response_text, parse_mode='Markdown')
            else:
                print(f"DEBUG - Invalid response format. Status: {data.get('status')}, Mail: {data.get('mail')}")
                bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                           reply_markup=create_main_keyboard())
        except json.JSONDecodeError as e:
            print(f"DEBUG - JSON Parse Error: {str(e)}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                       reply_markup=create_main_keyboard())
    except requests.exceptions.RequestException as e:
        print(f"DEBUG - Request Error: {str(e)}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}",
                   reply_markup=create_main_keyboard())
    except Exception as e:
        print(f"DEBUG - Unexpected Error: {str(e)}")
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                   reply_markup=create_main_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith('del_'))
def handle_message_actions(call):
    try:
        action, idx = call.data.split('_')
        idx = int(idx) - 1  # Convert to 0-based index
        user_id = call.from_user.id
        
        if user_id not in user_emails:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã")
            return
            
        email_data = user_emails[user_id]
        email = email_data['email']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        response = requests.get(f"{GET_MESSAGES_URL}?mail={email}")
        messages = json.loads(response.text).get('messages', [])
        
        if idx >= len(messages):
            bot.answer_callback_query(call.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        message = messages[idx]
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.answer_callback_query(call.id, "üóë –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        bot.delete_message(call.message.chat.id, call.message.message_id)
                
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(f"DEBUG - Error in handle_message_actions: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "üì¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É")
def check_mail_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    user_id = message.from_user.id
    if user_id not in user_emails:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìß –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç—É")
        return
    get_messages(message)

@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º")
def list_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–∏—Å–µ–º"""
    user_id = message.from_user.id
    if user_id not in user_emails:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìß –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç—É")
        return
    get_messages(message)

@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—á—Ç—É")
def delete_mail(message):
    user_id = message.from_user.id
    if user_id in user_emails:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if user_id in check_timers:
            stop_checking(message)
        
        # –£–¥–∞–ª—è–µ–º email –∏ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        del user_emails[user_id]
        if user_id in user_read_messages:
            del user_read_messages[user_id]
            
        bot.reply_to(message, "‚úÖ –ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã.")

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def help_button(message):
    help_command(message)

@bot.message_handler(func=lambda message: message.text == "üë§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏")
def generate_name_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
        name_data = generate_random_name()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_text = f"""
üë§ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*

üë®‚Äçüíº *–ò–º—è:* `{name_data['first_name']}`
üë®‚Äçüë¶ *–§–∞–º–∏–ª–∏—è:* `{name_data['last_name']}`
üÜî *–õ–æ–≥–∏–Ω:* `{name_data['login']}`

–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–∞—Ö.
–õ–æ–≥–∏–Ω –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —á–∞—Å—Ç—å email –∞–¥—Ä–µ—Å–∞."""
        
        bot.reply_to(message, response_text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏: {str(e)}")

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.text and message.text.startswith('/'):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    bot.reply_to(message, "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.", reply_markup=create_main_keyboard())

def split_long_message(text, max_length=4096):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) <= max_length:
        return [text]
        
    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
            
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö max_length
        split_point = text.rfind('\n', 0, max_length)
        if split_point == -1:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ max_length
            split_point = max_length
            
        parts.append(text[:split_point])
        text = text[split_point:].lstrip()
        
    return parts

@bot.message_handler(commands=['messages'])
def messages_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /messages"""
    get_messages(message)

def check_messages_job(chat_id):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if chat_id not in user_emails:
        return
        
    email_data = user_emails[chat_id]
    email = email_data['email']
    url = f"{GET_MESSAGES_URL}?mail={email}"
    
    try:
        response = requests.get(url)
        if response.status_code == 200 and response.text.strip():
            try:
                data = json.loads(response.text)
                messages = data.get('messages', [])
                
                if messages:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if chat_id not in user_read_messages:
                        user_read_messages[chat_id] = set()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    for msg in messages:
                        msg_id = msg.get('id', '')
                        if msg_id and msg_id not in user_read_messages[chat_id]:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            format_type = user_message_format.get(chat_id, 'full')
                            message_text = format_message(msg, format_type, 1, 1)
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                            msg_keyboard = InlineKeyboardMarkup()
                            msg_keyboard.row(
                                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_1")
                            )

                            try:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                bot.send_message(
                                    chat_id,
                                    "üì¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n" + message_text,
                                    parse_mode='Markdown',
                                    reply_markup=msg_keyboard
                                )
                                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                                user_read_messages[chat_id].add(msg_id)
                            except Exception as e:
                                print(f"DEBUG - Error sending new message: {str(e)}")
                                try:
                                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                    short_message = format_message(msg, 'compact', 1, 1)
                                    bot.send_message(
                                        chat_id,
                                        "üì¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n" + short_message,
                                        parse_mode='Markdown',
                                        reply_markup=msg_keyboard
                                    )
                                    user_read_messages[chat_id].add(msg_id)
                                except Exception as e2:
                                    print(f"DEBUG - Error sending short message: {str(e2)}")
            except Exception as e:
                print(f"DEBUG - Error in check_messages_job: {str(e)}")
    except Exception as e:
        print(f"DEBUG - Error in check_messages_job request: {str(e)}")

@bot.message_handler(commands=['start_checking'])
def start_checking(message):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    if chat_id not in user_emails:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ email —Å –ø–æ–º–æ—â—å—é /newmail")
        return
        
    if chat_id in check_timers:
        bot.reply_to(message, "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
        return
        
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    interval = check_intervals.get(chat_id, 15)
        
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    import threading
    def check_loop():
        while chat_id in check_timers:
            check_messages_job(chat_id)
            time.sleep(interval)
            
    check_timers[chat_id] = threading.Thread(target=check_loop)
    check_timers[chat_id].daemon = True
    check_timers[chat_id].start()
    
    bot.reply_to(message, f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞\n–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval} —Å–µ–∫—É–Ω–¥")

@bot.message_handler(commands=['stop_checking'])
def stop_checking(message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    if chat_id in check_timers:
        del check_timers[chat_id]
        bot.reply_to(message, "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        bot.reply_to(message, "‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")

@bot.message_handler(commands=['domains'])
def show_domains(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤"""
    domains_text = "üìß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã:\n\n"
    for i, domain in enumerate(AVAILABLE_DOMAINS, 1):
        domains_text += f"{i}. `@{domain}`\n"
    domains_text += "\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è email —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–æ–º–µ–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/newmail_domain <–Ω–æ–º–µ—Ä –¥–æ–º–µ–Ω–∞>"
    bot.reply_to(message, domains_text, parse_mode='Markdown')

@bot.message_handler(commands=['newmail_domain'])
def get_temp_mail_with_domain(message):
    try:
        args = message.text.split()
        if len(args) != 2 or not args[1].isdigit():
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–µ–Ω–∞.\n–ü—Ä–∏–º–µ—Ä: /newmail_domain 1\n–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤: /domains")
            return
            
        domain_index = int(args[1]) - 1
        if domain_index < 0 or domain_index >= len(AVAILABLE_DOMAINS):
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–º–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /domains –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤.")
            return
            
        selected_domain = AVAILABLE_DOMAINS[domain_index]
        url = f"{BASE_URL}?f=get_email_address&lang=en&domain={selected_domain}"
        
        response = requests.get(url)
        print(f"DEBUG - New Mail URL: {url}")
        print(f"DEBUG - New Mail Response: {response.text}")
        print(f"DEBUG - Response Status: {response.status_code}")
        
        try:
            data = json.loads(response.text)
            if 'email_addr' in data and 'sid_token' in data:
                email = data['email_addr']
                session_id = data['sid_token']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_emails[message.from_user.id] = {
                    'email': email,
                    'session_id': session_id
                }
                
                response_text = f"""
üìß –í–∞—à –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π email –∞–¥—Ä–µ—Å:
`{email}`

‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å
‚ö†Ô∏è –ê–¥—Ä–µ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç
üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /messages"""
            else:
                response_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å email –∞–¥—Ä–µ—Å. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}"
                
        except Exception as e:
            print(f"DEBUG - Error parsing response: {str(e)}")
            response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        
        bot.reply_to(message, response_text, parse_mode='Markdown')
            
    except Exception as e:
        print(f"DEBUG - Request error: {str(e)}")
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['set_interval'])
def set_check_interval(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        args = message.text.split()
        if len(args) != 2 or not args[1].isdigit():
            bot.reply_to(message, """
‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
–ü—Ä–∏–º–µ—Ä: /set_interval 15

‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
- 15 —Å–µ–∫—É–Ω–¥ (–º–∏–Ω–∏–º—É–º)
- 60 —Å–µ–∫—É–Ω–¥ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)
- 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)
            """)
            return
            
        interval = int(args[1])
        if interval < 15:
            bot.reply_to(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 15 —Å–µ–∫—É–Ω–¥")
            return
            
        chat_id = message.chat.id
        check_intervals[chat_id] = interval
        
        bot.reply_to(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥")
        
        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        if chat_id in check_timers:
            stop_checking(message)
            start_checking(message)
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == 'check_mail')
def check_mail_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã"""
    try:
        user_id = call.from_user.id
        if user_id not in user_emails:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã", show_alert=True)
            return

        bot.answer_callback_query(call.id, "üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É...")
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
        message = Message(
            message_id=call.message.message_id,
            from_user=call.from_user,
            date=call.message.date,
            chat=call.message.chat,
            content_type='text',
            options={},
            json_string=None
        )
        check_mail_button(message)
    except Exception as e:
        print(f"DEBUG - Error in check_mail_callback: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã", show_alert=True)
        except:
            pass

def create_message_keyboard(message_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_msg_{message_id}")
    )
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_msg_'))
def delete_message_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        print(f"DEBUG - Error deleting message: {str(e)}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

def format_message(msg, format_type='full', idx=None, total=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    msg_content = msg.get('body_html', '') or msg.get('body', '')
    msg_content = re.sub(r'<style.*?</style>', '', msg_content, flags=re.DOTALL)
    msg_content = re.sub(r'<script.*?</script>', '', msg_content, flags=re.DOTALL)
    msg_content = re.sub(r'<[^>]+>', ' ', msg_content)
    msg_content = re.sub(r'\s+', ' ', msg_content)
    msg_content = msg_content.strip()
    
    msg_content = msg_content.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
    
    from_field = msg.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    subject = msg.get('subject', '–ë–µ–∑ —Ç–µ–º—ã').replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    
    if format_type == 'compact':
        return f"""üì® {idx}/{total if total else '?'}
–û—Ç: {from_field}
–¢–µ–º–∞: {subject}"""
    
    elif format_type == 'brief':
        return f"""üì® {idx}/{total if total else '?'}
–û—Ç: {from_field}
–¢–µ–º–∞: {subject}
–î–∞—Ç–∞: {msg.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìù {msg_content[:100]}{"..." if len(msg_content) > 100 else ""}"""
    
    else:  # full
        message_text = f"""üì® {idx}/{total if total else '?'}
–û—Ç: {from_field}
–¢–µ–º–∞: {subject}
–î–∞—Ç–∞: {msg.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìù –¢–µ–∫—Å—Ç:
{msg_content[:300]}{"..." if len(msg_content) > 300 else ""}"""

        links = re.findall(r'https?://[^\s<>"]+|www\.[^\s<>"]+', msg_content)
        codes = re.findall(r'\b\d{4,8}\b', msg_content)
        
        if links:
            message_text += "\n\nüîó –°—Å—ã–ª–∫–∏:"
            for link in links[:3]:
                message_text += f"\n{link}"
            if len(links) > 3:
                message_text += "\n..."

        if codes:
            message_text += "\n\nüîë –ö–æ–¥—ã:"
            for code in codes[:3]:
                message_text += f"\n`{code}`"
            if len(codes) > 3:
                message_text += "\n..."
                
        return message_text

@bot.message_handler(commands=['format'])
def change_format(message):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = InlineKeyboardMarkup()
    for format_key, format_name in MESSAGE_FORMATS.items():
        keyboard.row(InlineKeyboardButton(
            f"{format_name} {'‚úÖ' if user_message_format.get(message.from_user.id) == format_key else ''}",
            callback_data=f"format_{format_key}"
        ))
    
    bot.reply_to(message, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('format_'))
def format_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = call.data.split('_')[1]
    user_id = call.from_user.id
    
    user_message_format[user_id] = format_type
    
    bot.answer_callback_query(call.id, f"‚úÖ –§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {MESSAGE_FORMATS[format_type]}")
    bot.edit_message_text(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç: {MESSAGE_FORMATS[format_type]}",
        call.message.chat.id,
        call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_full_'))
def show_full_message(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        idx = int(call.data.split('_')[2]) - 1
        user_id = call.from_user.id
        
        if user_id not in user_emails:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã")
            return
            
        email_data = user_emails[user_id]
        email = email_data['email']
        
        response = requests.get(f"{GET_MESSAGES_URL}?mail={email}")
        messages = json.loads(response.text).get('messages', [])
        
        if idx >= len(messages):
            bot.answer_callback_query(call.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        message = messages[idx]
        message_text = format_message(message, 'full', idx + 1, len(messages))
        
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, message_text, parse_mode='Markdown')
                
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(f"DEBUG - Error in show_full_message: {str(e)}")

def cleanup_expired_emails():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤"""
    current_time = time.time()
    expired_users = []
    
    for user_id, email_data in user_emails.items():
        if current_time > email_data.get('expired_at', 0):
            expired_users.append(user_id)
            
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —è—â–∏–∫–∞
                if user_id in check_timers:
                    del check_timers[user_id]
                    
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.send_message(
                    user_id,
                    "‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ –∏—Å—Ç–µ–∫.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üìß –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ."
                )
            except Exception as e:
                print(f"DEBUG - Error notifying user {user_id} about expired email: {str(e)}")
    
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —è—â–∏–∫–∏
    for user_id in expired_users:
        del user_emails[user_id]
        if user_id in user_read_messages:
            del user_read_messages[user_id]

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
import threading
def cleanup_loop():
    while True:
        try:
            cleanup_expired_emails()
        except Exception as e:
            print(f"DEBUG - Error in cleanup loop: {str(e)}")
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

cleanup_thread = threading.Thread(target=cleanup_loop)
cleanup_thread.daemon = True
cleanup_thread.start()

@bot.message_handler(commands=['backup'])
def backup_mailbox(message):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞"""
    user_id = message.from_user.id
    if user_id not in user_emails:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
        
    try:
        email_data = user_emails[user_id]
        email = email_data['email']
        url = f"{GET_MESSAGES_URL}?mail={email}"
        
        response = requests.get(url)
        if response.status_code == 200 and response.text.strip():
            data = json.loads(response.text)
            messages = data.get('messages', [])
            
            if not messages:
                bot.reply_to(message, "üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
                
            backup_text = f"üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ {email}\n"
            backup_text += f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            
            for idx, msg in enumerate(messages, 1):
                backup_text += f"\n{'='*30}\n"
                backup_text += f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ {idx}/{len(messages)}\n"
                backup_text += f"–û—Ç: {msg.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                backup_text += f"–¢–µ–º–∞: {msg.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
                backup_text += f"–î–∞—Ç–∞: {msg.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                backup_text += f"–¢–µ–∫—Å—Ç:\n{msg.get('body', '')}\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            parts = split_long_message(backup_text)
            for part in parts:
                bot.send_message(message.chat.id, part)
                
            bot.reply_to(message, "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            
    except Exception as e:
        print(f"DEBUG - Error creating backup: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")

@bot.message_handler(commands=['search'])
def search_messages(message):
    """–ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            bot.reply_to(message, """
‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
/search <—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞>

–ù–∞–ø—Ä–∏–º–µ—Ä:
/search –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
/search password
            """)
            return
            
        user_id = message.from_user.id
        if user_id not in user_emails:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
            
        search_text = args[1].lower()
        email_data = user_emails[user_id]
        email = email_data['email']
        url = f"{GET_MESSAGES_URL}?mail={email}"
        
        searching_msg = bot.reply_to(message, "üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
        
        try:
            response = requests.get(url)
            if response.status_code == 200 and response.text.strip():
                data = json.loads(response.text)
                messages = data.get('messages', [])
                
                found_messages = []
                for msg in messages:
                    content = msg.get('body_html', '') or msg.get('body', '')
                    subject = msg.get('subject', '')
                    sender = msg.get('from', '')
                    
                    # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö
                    if (search_text in content.lower() or 
                        search_text in subject.lower() or 
                        search_text in sender.lower()):
                        found_messages.append(msg)
                
                if not found_messages:
                    bot.reply_to(message, f"‚ùå –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '{search_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
                    
                bot.reply_to(message, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(found_messages)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for idx, msg in enumerate(found_messages, 1):
                    message_text = format_message(msg, 'brief', idx, len(found_messages))
                    bot.send_message(message.chat.id, message_text, parse_mode='Markdown')
                    
            else:
                bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞")
                
        except Exception as e:
            print(f"DEBUG - Error searching messages: {str(e)}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
            
        finally:
            try:
                bot.delete_message(message.chat.id, searching_msg.message_id)
            except:
                pass
                
    except Exception as e:
        print(f"DEBUG - Error in search command: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.polling() 